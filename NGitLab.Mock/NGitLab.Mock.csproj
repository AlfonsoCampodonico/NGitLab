<?xml version="1.0" encoding="utf-8"?>
<Project>
  <Import Project="$([System.IO.Path]::Combine($(SolutionDir), '.SwitchToSource', $(SolutionFileName.ToLowerInvariant().Replace('.switchtosource.sln', '.sln')), 'import', 'NGitLab.Mock.before.props'))" Condition="$(SolutionFileName.EndsWith('.SwitchToSource.sln', StringComparison.OrdinalIgnoreCase)) And Exists($([System.IO.Path]::Combine($(SolutionDir), '.SwitchToSource', $(SolutionFileName.ToLowerInvariant().Replace('.switchtosource.sln', '.sln')), 'import', 'NGitLab.Mock.before.props')))" />
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />
  <PropertyGroup>
    <TargetFrameworks>net461;netstandard2.0</TargetFrameworks>
  </PropertyGroup>
  <ItemGroup>
    <ProjectReference Include="..\NGitLab\NGitLab.csproj" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="LibGit2Sharp" Version="0.26.2" />
    <PackageReference Include="Internals.FileUtilities" Version="2.3.8" />
    <PackageReference Include="Internals.Git" Version="0.16.1" />
  </ItemGroup>
  <Import Project="$([System.IO.Path]::Combine($(SolutionDir), '.SwitchToSource', $(SolutionFileName.ToLowerInvariant().Replace('.switchtosource.sln', '.sln')), 'import', 'NGitLab.Mock.after.props'))" Condition="$(SolutionFileName.EndsWith('.SwitchToSource.sln', StringComparison.OrdinalIgnoreCase)) And Exists($([System.IO.Path]::Combine($(SolutionDir), '.SwitchToSource', $(SolutionFileName.ToLowerInvariant().Replace('.switchtosource.sln', '.sln')), 'import', 'NGitLab.Mock.after.props')))" />
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
</Project>